import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;

import edu.rit.ds.RemoteEventListener;
import edu.rit.ds.registry.NotBoundException;
import edu.rit.ds.registry.RegistryProxy;

/**
 * Class Customer is a client that wants to send a package to a destination and
 * uses a starting GPSOffice object that in turn beams the package to the
 * destination through the shortest possible path. While the package is being
 * beamed, the customer listens to the notification events generated by various
 * GPSOffice objects.
 * 
 * @author Chinmay Dani
 * 
 */
public class Customer {

	/**
	 * Name of the computer where the Registry Server is running.
	 */
	private static String host;
	/**
	 * Port number to which the Registry Server is listening.
	 */
	private static int port;
	/**
	 * Name of the city where the GPS office is located.
	 */
	private static String name;
	/**
	 * Destination's X coordinate.
	 */
	private static double x;
	/**
	 * Destination's X coordinate.
	 */
	private static double y;
	/**
	 * Used to store the receipt object for the package to be sent.
	 */
	private static Receipt receipt;
	/**
	 * A registry proxy reference.
	 */
	private static RegistryProxy proxy;

	/**
	 * The main method.
	 * 
	 * @param args
	 *            command line arguments.
	 * @throws IllegalArgumentException
	 *             Thrown if there is a discrepancy in the command line
	 *             arguments.
	 */
	public static void main(String[] args) {
		// Parse the command line arguments.
		if (args.length != 5) {
			System.out
					.println("Usage: java Customer <host> <port> <name> <X> <Y>");
			System.exit(0);
		}
		host = args[0];
		try {
			port = Integer.parseInt(args[1]);
		} catch (NumberFormatException nfe) {
			throw new IllegalArgumentException("Customer: Invalid <port>: "
					+ args[1]);
		}
		name = args[2];
		try {
			x = Double.parseDouble(args[3]);
		} catch (NumberFormatException nfe) {
			throw new IllegalArgumentException("Customer: Invalid <X>: "
					+ args[3]);
		}
		try {
			y = Double.parseDouble(args[4]);
		} catch (NumberFormatException nfe) {
			throw new IllegalArgumentException("Customer: Invalid <Y>: "
					+ args[4]);
		}

		// Create a PackageListener object to listen to GPSOfficeEvent remote
		// events.
		PackageEventListener listener = new PackageEventListener();
		try {
			UnicastRemoteObject.exportObject(listener, 0);
		} catch (RemoteException e1) {
			System.out.println("Exception caught while creating a listener.");
			e1.printStackTrace();
			System.exit(0);
		}

		// Lookup the name of the starting GPS office and send the package to it
		// along with the destination location.
		GPSOfficeInterface gpsOffice;
		try {
			proxy = new RegistryProxy(host, port);
			gpsOffice = (GPSOfficeInterface) proxy.lookup(name);
			gpsOffice.sendPackage(x, y, listener);
		} catch (RemoteException e) {
			if (receipt != null)
				System.out.println("Package number " + receipt.getTrackNumber()
						+ " lost by " + name + " office");
			else {
				System.out.println("Cannot connect to the registry server at "
						+ host + ":" + port);
				e.printStackTrace();
			}
			System.exit(0);
		} catch (NotBoundException e1) {
			System.out.println("Office " + name + " is not present");
			e1.printStackTrace();
			System.exit(0);
		} catch (Exception e) {
			System.out.println("Unkown exception caught: ");
			e.printStackTrace();
			System.exit(0);
		}
	}

	/**
	 * Class PackageEventListener is a RemoteEventListener encapsulation that
	 * specifically listens to remote events of the type GPSOfficeEvent.
	 * 
	 * @author Chinmay Dani
	 * 
	 */
	private static class PackageEventListener implements
			RemoteEventListener<GPSOfficeEvent> {

		/**
		 * Performs actions after receiving events.
		 */
		@Override
		public void report(long seq, GPSOfficeEvent event)
				throws RemoteException {
			// Gets the instance of the receipt object.
			if (receipt == null)
				receipt = event.getReceipt();

			if (event != null) {
				// If the package is lost by an office.
				if (event.isLost()) {
					System.out.println("Package number "
							+ receipt.getTrackNumber() + " lost by "
							+ event.getCurrentOffice() + " office");
					System.exit(0);
				}
				// If the package is delivered by an office.
				else if (event.isDelivered()) {
					System.out.println("Package number "
							+ receipt.getTrackNumber() + " delivered from "
							+ event.getCurrentOffice() + " office to (" + x
							+ "," + y + ")");
					System.exit(0);
				}
				// If the package arrives at an office or departs from an
				// office.
				else {
					if (event.isArrived()) {
						System.out.println("Package number "
								+ receipt.getTrackNumber() + " arrived at "
								+ event.getCurrentOffice() + " office");
					} else {
						System.out.println("Package number "
								+ receipt.getTrackNumber() + " departed from "
								+ event.getCurrentOffice() + " office");
					}
				}
			}
		}

	}
}
